#!/bin/sh
#|-*- mode:lisp -*-|#
#|List Information
exec ros +Q -m roswell -L sbcl-bin -- $0 "$@"
|#

(when (cl:find-package :ros.sub.list)
  (push :ros.sub.list *features*))

(ros:util)

#-ros.sub.list
(defpackage :ros.sub.list
  (:use :cl :ros.util))

(in-package :ros.sub.list)

#-ros.sub.list
(defun installed (&rest r)
  (cond
    ((null r)
     (format *error-output* "Installed implementations:~%")
     (finish-output *error-output*)
     (let ((dir (directory
                 (make-pathname
                  :defaults (merge-pathnames
                             (format nil "impls/~A/~A/" (uname-m) (uname))
                             (homedir))
                  :name :wild
                  :type :wild))))
       (mapc (lambda (d)
               (let ((impl (first (last (pathname-directory d)))))
                 (format t "~A~%" impl)
                 (ros:roswell `("list" "installed" ,impl) *standard-output*)))
             dir)))
    (t
     (dolist (impl/version r)
       (destructuring-bind (impl version) (parse-version-spec impl/version)
         (if version
             (if (probe-file (merge-pathnames
                              (format nil "impls/~A/~A/~A/~A" (uname-m) (uname) impl version)
                              (homedir)))
                 (format t "~a~%" impl/version)
                 (format *error-output* "~a is not installed~%" impl/version))
             (progn
               (format *error-output* "~%Installed versions of ~a:~%" impl)
               (finish-output *error-output*)
               (let ((dir (directory
                           (make-pathname
                            :defaults (merge-pathnames
                                       (format nil "impls/~A/~A/~A/" (uname-m) (uname) impl)
                                       (homedir))
                            :name :wild
                            :type :wild))))
                 (mapc (lambda (d)
                         (format t "~{~A~^/~}~%" (last (pathname-directory d) 2)))
                       dir)))))))))

#-ros.sub.list
(defun dump (&rest params)
  (let ((impl (impl (first params))))
    (format *error-output* "List of dumped images for ~A:~%" impl)
    (format t "~{~A~%~}"
            (mapcar #'pathname-name
                    (directory (make-pathname :name :wild
                                              :type (ros.util:core-extention impl)
                                              :defaults
                                              (merge-pathnames (format nil "impls/~A/~A/~A/dump/"
                                                                       (uname-m) (uname) impl)
                                                               (homedir))))))))
#-ros.sub.list
(defun versions (&rest params)
  ;; Experimental?
  (destructuring-bind (impl version) (parse-version-spec (impl (first params)))
    (declare (ignore version))
    (format *error-output* "Installable versions for ~A:~%" impl)
    (let ((path (or (probe-file (make-pathname
                                 :defaults *load-pathname*
                                 :type "lisp"
                                 :name (format nil "install-~A" impl)))
                    (probe-file (make-pathname
                                 :defaults *load-pathname*
                                 :type "lisp"
                                 :name (format nil "install+~A" impl))))))
      (when path
        (ros:script nil (make-pathname :defaults *load-pathname* :name "install" :type "lisp"))
        (load path)
        (let ((cmd (read-from-string "ros.install::*list-cmd*")))
          (and (boundp cmd)
               (symbol-value cmd)
               (setq cmd (cdr (assoc (first params) (symbol-value cmd) :test 'equal)))
               (dolist (v (funcall cmd))
                 (format t "~A~%" v))))))))

#-ros.sub.list
(defun main (subcmd cmd &rest r)
  (declare (ignorable subcmd cmd))
  (if (null r)
      (progn
        (format *error-output* "Possible subcommands:~%")
        (finish-output *error-output*)
        (format t "installed~%dump~%versions~%"))
      (let* ((*read-eval*)
             (symbol (read-from-string (first r)))
             (f (and (eql (symbol-package symbol) #.*package*)
                     (not (eql symbol 'main))
                     (ignore-errors (fdefinition symbol)))))
        (if f
            (apply f (rest r))
            (format *error-output* "not suppported type for list~%")))))
